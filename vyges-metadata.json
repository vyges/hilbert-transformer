{
  "$schema": "https://vyges.com/schema/v1/vyges-metadata.schema.json",
  "x-version": "1.0.0",
  "name": "vyges/hilbert-transformer",
  "version": "1.0.0",
  "description": "A fully pipelined digital Hilbert transformer IP block for DSP applications including single sideband modulation, amplitude/phase detection, and quadrature signal processing. Optimized for FPGA and ASIC implementations with configurable precision and maximum throughput.",
  "license": "Apache-2.0",
  "template": "vyges-ip-template@1.0.0",
  "target": [
    "asic",
    "fpga"
  ],
  "design_type": [
    "digital",
    "dsp"
  ],
  "maturity": "beta",
  "created": "2025-08-15T00:00:00Z",
  "updated": "2025-08-15T00:00:00Z",
  "source": {
    "type": "git",
    "url": "https://github.com/vyges/hilbert-transformer",
    "commit": "main",
    "private": false,
    "containsEncryptedPayload": false,
    "indexing": true
  },
  "maintainers": [
    {
      "name": "Vyges Team",
      "email": "team@vyges.com",
      "github": "vyges"
    }
  ],
  "branding": {
    "provider": "Vyges",
    "logo": "https://vyges.com/images/logo.svg",
    "website": "https://vyges.com/catalog/vyges/hilbert-transformer",
    "usage": "Use of the logo is permitted for attribution or compatibility references only."
  },
  "interfaces": [
    {
      "type": "clock",
      "direction": "input",
      "protocol": "Clock",
      "signals": [
        {
          "name": "clk_i",
          "direction": "input",
          "type": "clock",
          "width": 1,
          "description": "System clock"
        },
        {
          "name": "rst_n_i",
          "direction": "input",
          "type": "reset",
          "width": 1,
          "active_level": "low",
          "description": "Active-low reset"
        }
      ]
    },
    {
      "type": "stream",
      "direction": "input",
      "protocol": "AXI-Stream",
      "width": 16,
      "signals": [
        {
          "name": "tdata_i",
          "direction": "input",
          "width": 16,
          "type": "data",
          "description": "Input data stream"
        },
        {
          "name": "tvalid_i",
          "direction": "input",
          "type": "control",
          "width": 1,
          "description": "Input data valid"
        },
        {
          "name": "tready_o",
          "direction": "output",
          "type": "control",
          "width": 1,
          "description": "Ready to accept input"
        }
      ]
    },
    {
      "type": "stream",
      "direction": "output",
      "protocol": "AXI-Stream",
      "width": 16,
      "signals": [
        {
          "name": "tdata_o",
          "direction": "output",
          "width": 16,
          "type": "data",
          "description": "Output data stream (Hilbert transformed)"
        },
        {
          "name": "tvalid_o",
          "direction": "output",
          "type": "control",
          "width": 1,
          "description": "Output data valid"
        },
        {
          "name": "tready_i",
          "direction": "input",
          "type": "control",
          "width": 1,
          "description": "Downstream ready"
        }
      ]
    },
    {
      "type": "control",
      "direction": "bidirectional",
      "protocol": "Control",
      "signals": [
        {
          "name": "config_valid_i",
          "direction": "input",
          "type": "control",
          "width": 1,
          "description": "Configuration valid"
        },
        {
          "name": "config_data_i",
          "direction": "input",
          "width": 32,
          "type": "data",
          "description": "Configuration data"
        },
        {
          "name": "status_o",
          "direction": "output",
          "width": 32,
          "type": "data",
          "description": "Status information"
        }
      ]
    }
  ],
  "parameters": [
    {
      "name": "DATA_WIDTH",
      "type": "int",
      "default": 16,
      "description": "Data width for input and output streams",
      "range": {
        "min": 8,
        "max": 32
      },
      "units": "bits",
      "required": false
    },
    {
      "name": "FILTER_ORDER",
      "type": "int",
      "default": 64,
      "description": "FIR filter order for Hilbert transform",
      "range": {
        "min": 16,
        "max": 256
      },
      "units": "taps",
      "required": false
    },
    {
      "name": "PIPELINE_STAGES",
      "type": "int",
      "default": 8,
      "description": "Number of pipeline stages for throughput optimization",
      "range": {
        "min": 4,
        "max": 16
      },
      "units": "stages",
      "required": false
    },
    {
      "name": "COEFF_WIDTH",
      "type": "int",
      "default": 18,
      "description": "Width of filter coefficients",
      "range": {
        "min": 16,
        "max": 24
      },
      "units": "bits",
      "required": false
    },
    {
      "name": "ACCUM_WIDTH",
      "type": "int",
      "default": 32,
      "description": "Width of accumulator for FIR filter",
      "range": {
        "min": 16,
        "max": 48
      },
      "units": "bits",
      "required": false
    }
  ],
  "categories": {
    "primary": "signal-processing",
    "secondary": ["dsp", "filter", "communication"],
    "tags": ["hilbert", "dsp", "fir", "pipeline", "axi-stream", "fpga", "asic", "communication"]
  },
  "community": {
    "issues": "https://github.com/vyges/hilbert-transformer/issues",
    "contributions": "https://github.com/vyges/hilbert-transformer/pulls",
    "chat": "https://github.com/vyges/hilbert-transformer/discussions"
  },
  "test": {
    "coverage": true,
    "testbenches": [
      "cocotb",
      "systemverilog"
    ],
    "simulators": [
      "verilator",
      "iverilog",
      "vcs",
      "xcelium"
    ],
    "status": "passing",
    "categories": [
      "functional",
      "performance",
      "corner_case",
      "error",
      "coverage",
      "integration"
    ],
    "coverage_goals": {
      "line": 95,
      "branch": 90,
      "expression": 85,
      "toggle": 80
    },
    "integration_tests": {
      "soc": "Complete SoC integration testing with AXI-Stream protocols",
      "fpga": "FPGA integration testing with board-specific features",
      "asic": "ASIC integration testing with synthesis flows",
      "interfaces": "Interface adapter testing and protocol validation",
      "performance": "Performance benchmarking and throughput analysis",
      "protocol": "Protocol compliance checking and validation"
    }
  },
  "flows": {
    "verilator": {
      "status": "verified",
      "version": "4.0+",
      "features": [
        "coverage",
        "waveforms",
        "linting"
      ]
    },
    "iverilog": {
      "status": "verified",
      "version": "11.0+",
      "features": [
        "simulation",
        "waveforms"
      ]
    },
    "vcs": {
      "status": "verified",
      "version": "2020.03+",
      "features": [
        "coverage",
        "waveforms",
        "debug"
      ]
    },
    "xcelium": {
      "status": "verified",
      "version": "20.09+",
      "features": [
        "coverage",
        "waveforms",
        "debug"
      ]
    },
    "openlane": {
      "pdks": [
        "sky130B"
      ],
      "status": "tested",
      "version": "2.0+",
      "features": [
        "synthesis",
        "placement",
        "routing"
      ]
    },
    "vivado": {
      "status": "verified",
      "version": "2023.1+",
      "features": [
        "synthesis",
        "implementation",
        "bitstream"
      ]
    },
    "yosys": {
      "status": "verified",
      "version": "0.30+",
      "features": [
        "synthesis",
        "optimization"
      ]
    }
  },
  "asic": {
    "flavor": "digital",
    "pdks": [
      "sky130B",
      "tsmc28"
    ],
    "synthesis_tool": "openlane",
    "clock_freq_mhz": 500,
    "constraints": [
      "constraints.sdc"
    ],
    "tools": [
      "yosys",
      "openroad",
      "magic"
    ],
    "area_mm2": 0.3,
    "power_mw": 5,
    "gate_count": 100000
  },
  "fpga": {
    "toolchain": "vivado",
    "board": "arty-a7-35",
    "device": "xc7a35ticsg324-1L",
    "cfu_playground_compatible": true,
    "constraints": [
      "constraints.xdc"
    ],
    "clock_freq_mhz": 200,
    "resources": {
      "lut": 4000,
      "dsp": 32,
      "bram": 2,
      "ff": 2000
    }
  },
  "integration": {
    "framework": {
      "soc": {
        "description": "Complete system-on-chip integration with AXI-Stream adapters",
        "components": [
          "axi_stream_adapter.sv",
          "example_soc.sv",
          "configuration_controller.sv",
          "performance_monitor.sv",
          "error_detector.sv",
          "interrupt_controller.sv"
        ],
        "features": [
          "AXI-Stream protocol compliance",
          "FIFO buffering and backpressure handling",
          "Configuration and status management",
          "Performance monitoring and error detection",
          "Interrupt generation and handling"
        ]
      },
      "fpga": {
        "description": "FPGA integration examples with board-specific features",
        "boards": [
          {
            "name": "Arty-A7-35",
            "device": "xc7a35ticsg324-1L",
            "example": "arty_a7_example.sv",
            "features": [
              "UART interface for data communication",
              "LED status indicators",
              "Push button control",
              "PMOD interface for debugging",
              "Real-time signal processing"
            ]
          }
        ]
      },
      "asic": {
        "description": "ASIC integration with standard cell and OpenLane flow",
        "components": [
          "standard_cell/",
          "openlane/"
        ],
        "features": [
          "Standard cell library compatibility",
          "OpenLane synthesis and implementation",
          "Timing and power constraints",
          "Physical design integration"
        ]
      },
      "interfaces": {
        "description": "Interface adapters for protocol conversion",
        "adapters": [
          "axi_stream_to_apb.sv",
          "axi_stream_to_ahb.sv",
          "axi_stream_to_wishbone.sv",
          "axi_stream_to_avalon.sv"
        ],
        "protocols": [
          "AXI-Stream",
          "APB",
          "AHB",
          "Wishbone",
          "Avalon"
        ]
      },
      "verification": {
        "description": "Comprehensive integration verification framework",
        "components": [
          "integration_testbench.sv",
          "protocol_checker.sv",
          "performance_monitor.sv",
          "coverage_collector.sv"
        ],
        "test_categories": [
          "Reset and initialization",
          "AXI-Stream protocol compliance",
          "Configuration interface testing",
          "Backpressure and flow control",
          "Performance validation",
          "Error injection and handling",
          "Interrupt testing",
          "Corner case validation",
          "Protocol compliance verification",
          "Stress testing"
        ]
      }
    },
    "examples": [
      {
        "target": "simulation",
        "wrapper": "integration/soc/example_soc.sv",
        "tb": "integration/verification/integration_testbench.sv",
        "description": "Complete SoC integration with AXI-Stream interface"
      },
      {
        "target": "fpga",
        "wrapper": "integration/fpga/xilinx/arty_a7_example.sv",
        "tb": "integration/verification/integration_testbench.sv",
        "description": "FPGA integration with UART interface and LED indicators"
      },
      {
        "target": "asic",
        "wrapper": "integration/soc/example_soc.sv",
        "tb": "integration/verification/integration_testbench.sv",
        "description": "ASIC integration with OpenLane flow and synthesis"
      }
    ],
    "interfaces": {
      "axi_stream": "Standard AXI-Stream protocol for data streaming with comprehensive adapter support",
      "apb": "AXI-Stream to APB bridge for configuration interface",
      "ahb": "AXI-Stream to AHB bridge for high-performance systems",
      "wishbone": "AXI-Stream to Wishbone bridge for open-source designs",
      "avalon": "AXI-Stream to Avalon bridge for Intel FPGA designs"
    },
    "build_system": {
      "makefile": "integration/Makefile",
      "features": [
        "Multi-simulator support (Verilator, Icarus, VCS, Xcelium)",
        "Coverage analysis and reporting",
        "Performance benchmarking",
        "FPGA and ASIC synthesis",
        "Continuous integration and regression testing",
        "Documentation generation"
      ]
    }
  },
  "automation": {
    "automation_level": "enhanced",
    "minimal_required": [
      "name",
      "version",
      "license",
      "interfaces",
      "template",
      "target",
      "design_type",
      "maturity",
      "description",
      "source",
      "asic",
      "fpga",
      "test",
      "flows"
    ],
    "recommended_for_automation": [
      "parameters",
      "dependencies",
      "toolRequirements",
      "performance",
      "reliability",
      "packaging",
      "community",
      "integration"
    ],
    "blocking_issues": [],
    "ci_cd": {
      "github_actions": true,
      "jenkins": false,
      "gitlab_ci": false,
      "azure_devops": false
    },
    "integration_automation": {
      "build_system": "integration/Makefile",
      "test_automation": "Comprehensive integration test suite with 10 test categories",
      "coverage_automation": "Integration coverage analysis and reporting",
      "performance_automation": "Performance benchmarking and analysis",
      "synthesis_automation": "FPGA and ASIC synthesis flows",
      "documentation_automation": "Integration documentation generation"
    }
  },
  "reliability": {
    "error_detection": [
      "overflow",
      "invalid_configuration",
      "protocol_violations"
    ],
    "error_recovery": "graceful_degradation",
    "test_coverage": "comprehensive",
    "formal_verification": "planned"
  },
  "packaging": {
    "ip_core": true,
    "netlist": true,
    "hard_ip": false,
    "constraints": true,
    "documentation": true,
    "testbench": true,
    "integration_components": {
      "soc_examples": true,
      "fpga_examples": true,
      "asic_examples": true,
      "interface_adapters": true,
      "verification_framework": true,
      "build_system": true
    }
  },
  "meta": {
    "template": {
      "generator": "vyges-cli",
      "init_tool": "vyges-cli",
      "template_version": "1.0.0",
      "generated_at": "2025-08-15T00:00:00Z"
    },
    "generated_by": "vyges-cli",
    "schema": {
      "version": "1.0.0",
      "compatible_versions": [
        "1.0.0",
        "1.1.0"
      ],
      "generated_with": "vyges-cli"
    }
  }
}